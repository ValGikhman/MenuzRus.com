@model MenuzRus.Models.MenuDesignerModel
@using Services
<link href="@Url.Content("~/Content/MenuDesigner.css")" rel="stylesheet" />
<link href="@Url.Content("~/Content/jquery.colpick.css")" rel="stylesheet" />
<script src="@Url.Content("~/Scripts/jquery/jquery.colpick.js")"></script>
<script src="@Url.Content("~/Scripts/MenuDesigner.js")"></script>

<div class="modal menuEditForm" role="dialog">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header modal-new">
                <button type="button" class="close" data-dismiss="modal" aria-hidden="true">&times;</button>
                <h4 class="modal-title menuTitle">Menu</h4>
            </div>
            <div id="menuEditForm" class="modal-body">
                <div class="container">
                    <div class="row">
                        @Html.TextBoxFor(m => m.Menu.Name, new { @class = "form-control input-sm shadow col-md-3", required = "", placeholder = "Enter new menu name" })
                    </div>
                    <div class="row">
                        @Html.TextAreaFor(m => m.Menu.Description, new { @class = "form-control input-sm shadow", rows = 5, placeholder = "Enter Item Name Description", type = "text" })
                    </div>
                </div>
            </div>
            <div class="modal-footer">
                <button id="btnCancelMenu" type="button" class="btn btn-default btn-lg" data-dismiss="modal">Close</button>
                <button id="btnSaveMenu" type="button" class="btn btn-success btn-lg">Save changes</button>
            </div>
        </div>
    </div>
</div>

<div class="well toolbar">
    <div class="modal-header main-header">
        <h2>Menu designer</h2>
    </div>
    <div id="default">
        <div class="btn-group menu">
            <button id="btnSettings" type="button" class="btn alert-warning btn-lg">
                <span class="glyphicon glyphicon-cog"></span>
            </button>
            <button id="btnMenu" type="button" class="btn alert-warning btn-lg" data-toggle="dropdown">@Model.Menu.Name&nbsp;</button>
            <ul id="menuList" class="dropdown-menu alert-warning" role="menu">
                @foreach (Menu menu in Model.Menus) {
                    <li><a href="#" data-value="@menu.id">@menu.Name</a></li>
                }
            </ul>
        </div>

        <button id="btnNewMenu" type="button" class="btn btn-primary btn-lg shadow">New menu</button>
        <button id="btnEditMenu" type="button" class="noshow btn btn-primary btn-lg shadow">Edit menu</button>
        <button id="btnDeleteMenu" type="button" class="noshow btn btn-danger btn-lg shadow">Delete menu</button>
        <button id="btnMenuIt" type="button" class="noshow btn btn-primary btn-lg shadow">Menu-it</button>
        <div class=" pull-right">
            <button id="btnDesignMenu" type="button" class="btn btn-primary btn-lg shadow" data-toggle="modal" onclick="javascript:designMenu()">Design menu</button>
        </div>
    </div>
</div>
<div class="well panel-setting-body">
    <ul class="nav nav-pills">
        <li class="active"><a href="#pageTab" data-toggle="tab">Page background</a>
        </li>
        <li><a href="#wallTab" data-toggle="tab">Wall background</a>
        </li>
        <li><a href="#settingsTab" data-toggle="tab">Settings</a>
        </li>
        <li><a href="#othersTab" data-toggle="tab">Other settings</a>
        </li>
    </ul>
    <button id="btnCloseSetting" class="close" aria-hidden="true" data-dismiss="modal" type="button">×</button>

    <!-- Tab panes -->
    <div class="tab-content">
        @{Uri urlRoot = new Uri(Server.MapPath("~"));}
        <div class="tab-pane fade in active" id="pageTab">
            @{
                foreach (String file in Model.PageBackgrounds) {
                    Uri urlPath = new Uri(file);
                <img src="/@urlRoot.MakeRelativeUri(urlPath).ToString()" class="img-page img-thumbnail" />
                }
            }
        </div>

        <div class="tab-pane fade in" id="wallTab">
            @{
                foreach (String file in Model.Wallpapers) {
                    Uri urlPath = new Uri(file);
                <img src="/@urlRoot.MakeRelativeUri(urlPath).ToString()" class="img-wall img-thumbnail" />
                }
            }
        </div>
        <div class="tab-pane fade in" id="settingsTab">
            @foreach (Common.SettingsItems item in Enum.GetValues(typeof(Common.SettingsItems))) {
                var description = EnumHelper<Common.SettingsItems>.GetDisplayValue(item);
                var kolor = Model.Settings[String.Format("{0}{1}", item.ToString(), "Color")];
                var fontsize = Model.Settings[String.Format("{0}{1}", item.ToString(), "FontSize")];
                <div class="row settings">
                    <div class="col-md-2">@description
                    </div>
                    <div id="@String.Format("{0}{1}", item, "Color")" class="color-box col-md-1 col-lg-1"  style="background-color:@kolor"></div>
                    <div id="@String.Format("{0}{1}", item, "FontSize")" class="slider font col-md-3 col-lg-3"></div>
                    <span id="@String.Format("{0}{1}", item, "FontSizeBadge")" class="badge font">@fontsize</span>
                </div>
            }
        </div>
        <div class="tab-pane fade in" id="othersTab">
            <button id="btnShowHiddenItems" type="button" class="btn btn-success" data-toggle="button">Show hidden menu items</button>
        </div>
    </div>
</div>
<div class="wall">
    <div style="margin: 0 auto;">
        <div class="col-md-3 page">
            <a href="@Url.Content("~/Customer/Index/")@Model.MyCompany.id">
                @if (!String.IsNullOrEmpty(@Model.MyCompany.ImageUrl)) {
                    <div>
                        <img src="@Url.Content(String.Format("~/Images/Menus/{0}/Customers/{1}?{2}", @Model.MyCompany.id, @Model.MyCompany.ImageUrl, Guid.NewGuid().ToString("N")))" class="logo" />
                    </div>
                }
                <div class="category">@Model.MyCompany.Name</div>
                <div class="item">Welcomes you</div>
                <div class="price">
                    @Model.MyCompany.Address<br>
                    @Model.MyCompany.City, @Model.MyCompany.State @Model.MyCompany.Zip<br>
                    @Model.MyCompany.Phone
                </div>
            </a>
        </div>

        <div class="col-md-3 page">
            @ShowPage(Model, Common.Side.Left)
        </div>

        <div class="col-md-3 page">
            @ShowPage(Model, Common.Side.Center)
        </div>

        <div class="col-md-3 page">
            @ShowPage(Model, Common.Side.Right)
        </div>
    </div>
</div>
@Html.HiddenFor(m => m.Menu.id)
@Html.HiddenFor(m => m.Menu.Name)
@Html.HiddenFor(m => m.Settings[Common.Settings.CategoryColor.ToString()])
@Html.HiddenFor(m => m.Settings[Common.Settings.CategoryDescriptionColor.ToString()])
@Html.HiddenFor(m => m.Settings[Common.Settings.CategoryDescriptionFontSize.ToString()])
@Html.HiddenFor(m => m.Settings[Common.Settings.CategoryFontSize.ToString()])
@Html.HiddenFor(m => m.Settings[Common.Settings.ItemColor.ToString()])
@Html.HiddenFor(m => m.Settings[Common.Settings.ItemDescriptionColor.ToString()])
@Html.HiddenFor(m => m.Settings[Common.Settings.ItemDescriptionFontSize.ToString()])
@Html.HiddenFor(m => m.Settings[Common.Settings.ItemFontSize.ToString()])
@Html.HiddenFor(m => m.Settings[Common.Settings.PageBackground.ToString()])
@Html.HiddenFor(m => m.Settings[Common.Settings.PriceColor.ToString()])
@Html.HiddenFor(m => m.Settings[Common.Settings.PriceFontSize.ToString()])
@Html.HiddenFor(m => m.Settings[Common.Settings.WallBackground.ToString()])
@Html.HiddenFor(m => m.Settings[Common.Settings.ShowHiddenItems.ToString()])

@helper ShowPage(MenuzRus.Models.MenuDesignerModel Model, Common.Side side) {
    <ul class="category-group">
        @foreach (Category category in Model.Categories.Where(m => m.Side == side).ToList()) {
            <li  data-value="@category.id">
                <a class="categoryMenu">
                    @if (!String.IsNullOrEmpty(category.Name)) {
                        String categoryDataValue = String.Format("{0}{1}", "category_", category.id);
                        <div id="@categoryDataValue" class="category" data-value="@category.id">
                            @category.Name
                            @if (!String.IsNullOrEmpty(@category.ImageUrl)) {
                                <div>
                                    <img src="@Url.Content(String.Format("~/Images/Menus/{0}/Categories/{1}?{2}", Model.MyCompany.id, category.ImageUrl, Guid.NewGuid().ToString("N")))" class="categoryImage" />
                                </div>
                            }
                            @if (!String.IsNullOrEmpty(@category.Description)) {
                                <div class="categoryDescription">@category.Description</div>
                            }
                        </div>
                    }
                </a>

                @if (category.Items != null && !String.IsNullOrEmpty(category.Name)) {
                    <ul class="items-group">
                        @foreach (Item item in category.Items.OrderBy(m => m.SortOrder)) {
                            <li data-value="@item.id">
                                <a class="itemMenu">
                                    @if (!String.IsNullOrEmpty(@item.ImageUrl)) {
                                        <img src="@Url.Content(String.Format("~/Images/Menus/{0}/Items/{1}?{2}", Model.MyCompany.id, item.ImageUrl, Guid.NewGuid().ToString("N")))" class="itemImage" />
                                    }
                                    @if (!String.IsNullOrEmpty(item.Name)) {
                                        String itemDataValue = String.Format("{0}{1}", "item_", item.id);
                                        <div id="@itemDataValue"class="item" data-value="@item.id">
                                            @item.Name
                                        </div>
                                    }
                                </a>
                                @if (!String.IsNullOrEmpty(item.Description)) {
                                    <div class="itemDescription">@item.Description </div>
                                }
                                @{
                                String price = item.AdditionalInfo;
                                if (String.IsNullOrEmpty(item.AdditionalInfo)) {
                                    price = item.ItemPrices.OrderByDescending(m => m.DateCreated).Take(1).Select(m => m.Price).FirstOrDefault().ToString("C");
                                }
                                    <div class="price">@price</div>
                                }
                            </li>
                        }
                    </ul>
                }
            </li>
        }
    </ul>
}