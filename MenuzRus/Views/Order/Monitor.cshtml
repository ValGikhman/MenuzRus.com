@model MenuzRus.Models.MonitorFloorModel
@using Services
<link href="@Url.Content("~/Scripts/countdown/jquery.countdown.css")" rel="stylesheet" />
<link href="@Url.Content("~/Content/floor.css")" rel="stylesheet" />
<link href="@Url.Content("~/Content/monitor.css")" rel="stylesheet" />

<script src="@Url.Content("~/Scripts/countdown/jquery.plugin.js")"></script>
<script src="@Url.Content("~/Scripts/countdown/jquery.countdown.js")"></script>
<script src="@Url.Content("~/Scripts/JQuery/jquery.json-2.4.min.js")"></script>
<script src="@Url.Content("~/Scripts/monitors.js")"></script>
<script type="text/javascript" src="https://www.gstatic.com/charts/loader.js"></script>

<div class="well container container-floor shadow">
    <div class="modal-header main-header">
        <h2>@Resources.Resource.MONITOR_TITLE</h2>
    </div>

    <div class="floor dropdown">
        <button id="btnFloor" type="button" class="btn alert-warning btn-lg" data-toggle="dropdown">@Model.Floor.Name</button>
        <ul id="floor" class="dropdown-menu alert-warning" role="menu">
            <li class="dropdown-header">@Resources.Resource.MENU_NAVIGATE_TO_FLOORS:</li>
            <li role="separator" class="divider"></li>
            <li><a href="#" data-value="0">@Resources.Resource.COMMON_ALL</a></li>
            @foreach (Floor floor in Model.Floors) {
                <li><a href="#" data-value="@floor.id">@floor.Name</a></li>
            }
        </ul>
    </div>
    <div class="graph">
        <div id="chart"></div>
    </div>

    <div class="floorArea shadow">
        @Html.Partial("_MonitorPartial", Model)
    </div>
    <a href="#">@Resources.Resource.COMMON_TABLES <span class="tables badge"></span></a>
</div>
@Html.HiddenFor(m => m.Floor.id)
@Html.HiddenFor(m => m.Floor.Name)
@Html.HiddenFor(m => m.Sales)
@Html.HiddenFor(m => m.Inventory)

<script type="text/javascript">
    var options = {
        width: 400
        , height: 120
        , redFrom: 0
        , redTo: 10
        , yellowFrom: 10
        , yellowTo: 20
        , minorTicks: 10
    };

    var chart;

    $(function () {
        //activate chart
        google.charts.load("current", { "packages": ["gauge"] });
        google.charts.setOnLoadCallback(drawStuff);

        $("#floor li a").click(function () {
            $("#btnFloor").text($(this).text());
            window.location = $.validator.format("{0}Order/Monitor/{1}", root, $(this).attr("data-value"));
        });
        refreshTotal();

        window.setInterval(function () {
            $(".timer").countdown("destroy");
            $("#floorContainer").remove();

            var id = $("#Floor.id").val();
            var jqxhr = $.get($.validator.format("{0}Order/MonitorRefresh/", root), { id: id })
                .done(function (result) {
                    $(".floorArea").append(result);
                    addTimers();
                    setTableStatus();
                    setCheckStatus();
                    refreshGraph();
                })
            .fail(function () {
                message("::setInterval:: Failed.", "error", "topCenter");
            })
            .always(function () {
                message("Refreshed", "success", "topCenter");
            });
        }, 60 * 1000);

    })

    function drawStuff() {
        var sales = parseFloat($("#Sales").val());
        var inventory = parseFloat($("#Inventory").val());

        var data = google.visualization.arrayToDataTable([
          ["Label", "Value"],
          ["@Resources.Resource.MENU_REPORTS_SALES", sales],
          ["@Resources.Resource.MENU_REPORTS_INVENTORY", inventory]
        ]);

        chart = new google.visualization.Gauge(document.getElementById("chart"));
        chart.draw(data, options);
    };

    function refreshTotal() {
        $(".tables.badge").html($(".table").length);
    }

    function refreshGraph() {
        var jqxhr = $.get($.validator.format("{0}Order/GraphRefresh/", root))
            .done(function (result) {
                var data = google.visualization.arrayToDataTable([
                  ["Label", "Value"],
                  ["Sales", result.sales],
                  ["Inventory", result.inventory]
                ]);
                chart = new google.visualization.Gauge(document.getElementById("chart"));
                chart.draw(data, options);
            })
        .fail(function () {
            message("::setInterval:: Failed.", "error", "topCenter");
        })
        .always(function () {
            message("Refreshed", "success", "topCenter");
        });
    }

    function viewTable(id) {
        window.location = $.validator.format("{0}Order/Table/{1}", root, id);
    }
</script>