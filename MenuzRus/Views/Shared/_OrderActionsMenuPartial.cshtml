@model List<MenuzRus.Models.Check>
<script src="@Url.Content("~/Scripts/TouchSpin/jquery.bootstrap-touchspin.min.js")" type="text/javascript"></script>

<button class="btn btn-primary btn-lg shadow" onclick="javascript:selectAll();"><i class="glyphicon glyphicon-plus"></i></button>
<button class="btn btn-primary btn-lg shadow" onclick="javascript:removeAll();"><i class="glyphicon glyphicon-minus"></i></button>
<button id="btnDeleteSelectedChecks" class="btn btn-danger btn-lg pull-right shadow" style="margin-left: 10px;" onclick="javascript:deleteSelected();"><i class="glyphicon glyphicon-trash"></i></button>
<button type="button" class="btn btn-warning btn-lg pull-right shadow" onclick="javascript:getComments('check')"><span class="glyphicon glyphicon-edit"></span></button>
<div class="menuActions-container">
    <select data-placeholder="Click to add" class="chosen-select shadow" multiple>
        @foreach (MenuzRus.Models.Check check in Model) {
            <option value="@check.id">#@check.id</option>
        }
    </select>

    <ul class="nav nav-pills btn-default menu-actions-tab">
        <li><a id="propertiesTab" href="#menu-actions-properties-tab" data-toggle="pill">Properties
        </a></li>
        <li><a id="printTab" href="#menu-actions-print-tab" data-toggle="pill">Print Mode
        </a></li>
    </ul>
    <div class="tab-content">
        <div id="menu-actions-properties-tab" class="tab-pane fade in actionsProperties">
            <div class="col-md-7 col-lg-7">

                <div class="form-group">
                    <div class="input-group">
                        <div class="input-group-addon shadow leiba" style="width: 100px">Split</div>
                        <input id="slideSplit" name="slideSplit" type="text" class="form-control shadow" value="1" />
                    </div>
                </div>

                <div class="form-group">
                    <div class="input-group">
                        <div class="input-group-addon shadow leiba" style="width: 100px">Adjustment</div>
                        <input id="adjustmentSplit" name="adjustmentSplit" type="text" class="form-control shadow" value="0" />
                    </div>
                </div>
            </div>

            <div class="form-control properties col-md-12 col-lg-12">
                <div class="dropdown" style="display: inline">
                    @Html.Label("Type:")
                    <div class="dropup checkType">
                        <button id="btnCheckType" type="button" class="btn alert-warning btn-lg" data-toggle="dropdown">@Common.CheckType.Guest</button>
                        <ul id="checkType" class="dropdown-menu alert-warning" role="menu">
                            @foreach (Common.CheckType type in (Common.CheckType[])Enum.GetValues(typeof(Common.CheckType))) {
                                <li><a href="#">@type</a></li>
                            }
                        </ul>
                    </div>
                </div>

                <div class="dropdown col-md-offset-1 col-lg-offset-1" style="display: inline">
                    @Html.Label("Status:")
                    <div class="dropup checkStatus">
                        <button id="btnCheckStatus" type="button" class="btn alert-warning btn-lg" data-toggle="dropdown">@Common.CheckStatus.Active</button>
                        <ul id="checkStatus" class="dropdown-menu alert-warning" role="menu">
                            @foreach (Common.CheckStatus status in (Common.CheckStatus[])Enum.GetValues(typeof(Common.CheckStatus))) {
                                if (status != Common.CheckStatus.Ready) {
                                <li data-value="@status"><a href="#">@status</a></li>
                                }
                            }
                        </ul>
                    </div>
                </div>
            </div>
        </div>
        <div id="menu-actions-print-tab" class="tab-pane fade in actionsPrint">
            <button id="btnPrintChecks" class="btn btn-primary shadow pull-right"><i class="glyphicon glyphicon-print"></i>&nbsp;Print</button>
        </div>
    </div>
</div>
<script type="text/javascript">
    $(function () {
        if (!QZPrint) {
            $("#printTab").parent().hide();
            $("#menu-actions-print-tab").hide();
        }

        $("#slideSplit").TouchSpin({
            min: 1,
            max: 5,
            step: 1,
            decimals: 0,
            postfix: "person(s)"
        });

        $("#adjustmentSplit").TouchSpin({
            min: -100,
            max: 100,
            step: 5,
            decimals: 0,
            postfix: "%"
        });

        $("#btnPrintChecks").on("click", function () {
            var selected = $(".chosen-select")[0].selectedOptions;
            var ids = new Array();
            $.each($(selected), function (index, item) {
                ids.push(parseInt(item.value));
            });
            checksPrint(ids);
        });

        var checkId = $(".check").find(".tab-pane.active").attr("data-value");

        $(".check").find(".tab-pane").html("");
        $(".chosen-select").chosen({ width: "100%", display_disabled_options: false }).val(checkId).trigger("chosen:updated");

    });

    function checksPrint(checksIds) {
        var split = parseInt($("#slideSplit").val());
        var adjustment = parseInt($("#adjustmentSplit").val());

        var jqxhr = $.get($.validator.format("{0}Order/ChecksPrint", root), { "checksIds": JSON.stringify(checksIds), "split": split, "adjustment": adjustment }, "json")
            .done(function (result) {
                printData(result, printerPOS);
            })
            .fail(function () {
                message("::checksPrint:: Failed.", "error", "topCenter");
            })
            .always(function () {
            });
    }

    function selectAll() {
        $(".chosen-select option").prop("selected", true);
        $(".chosen-select").trigger("chosen:updated");
    };

    function removeAll() {
        $(".chosen-select option").prop("selected", false);
        $(".chosen-select").trigger("chosen:updated");
    };

    function deleteSelected() {
        noty({
            layout: "center",
            type: "error",
            killer: true,
            model: true,
            text: "<strong>" + $(".chosen-select").val() + "</strong></em> will be deleted.<br />Would you like to continue ?",
            buttons: [{
                addClass: 'btn btn-danger', text: 'Delete', onClick: function ($noty) {
                    $noty.close();
                    var selected = $(".chosen-select").val();
                    var ids = new Array();
                    $.each($(selected), function (index, item) {
                        ids.push(parseInt(item));
                    });
                    deleteSelectedChecks(ids);
                }
            },
              {
                  addClass: 'btn btn-default', text: 'Cancel', onClick: function ($noty) {
                      $noty.close();
                  }
              }
            ]
        });
    }

    function deleteSelectedChecks(checksIds) {
        var container = $(".layout");
        container.block();
        var jqxhr = $.get($.validator.format("{0}Order/DeleteChecks", root), { "checksIds": JSON.stringify(checksIds) }, "json")
            .done(function (result) {
            })
            .fail(function () {
                message("::deleteCheck:: Failed.", "error", "topCenter");
            })
            .always(function () {
                window.location.reload();
            });
    }

    function getComments(type, element) {
        var parentId;
        if (type == "check") {
            parentId = $(".check").find(".tab-pane.active").attr("data-value");
        }
        else {
            parentId = $(element).attr("data-value");
        }
        $("#commentType").val(type);
        $("#parentId").val(parentId);

        var container = $(".layout");
        container.block();
        var jqxhr = $.get($.validator.format("{0}Comments/GetComments/", root), { "parentId": parentId, "type": type })
            .done(function (result) {
                $("#modalEditForm").html(result);
                $(".modalEditForm").modal("show");
            })
            .fail(function () {
            })
            .always(function () {
                container.unblock();
            });
    }
</script>