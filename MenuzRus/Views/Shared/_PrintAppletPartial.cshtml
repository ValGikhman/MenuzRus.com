<script src="@Url.Content("~/Scripts/QZPrint/deployJava.js")"></script>
<script type="text/javascript">    if (deployJava.versionCheck("1.6.0+") || deployJava.versionCheck("1.4") || deployJava.versionCheck("1.5.0*")) {
        QZPrint = true;
        deployQZ();
        findPrinters();
        getPrinters();
        $("#printerImage").show();
    }
    else {
        QZPrint = false;
        $("#printerImage").hide();
    }

    function deployQZ() {
        var attributes = {
            id: "qz",
            code: "qz.PrintApplet.class",
            archive: "@Url.Content("~/Scripts/QZPrint/qz-print.jar")",
            width: 1,
            height: 1
        };
        var parameters = {
            jnlp_href: "@Url.Content("~/Scripts/QZPrint/qz-print_jnlp.jnlp")",
            cache_option: "plugin",
            disable_logging: "false",
            initial_focus: "false"
        };
        if (deployJava.versionCheck("1.7+") == true) { }
        else if (deployJava.versionCheck("1.6+") == true) {
            delete parameters["jnlp_href"];
        }
        deployJava.runApplet(attributes, parameters, "1.5");
    }

    /**
    * Automatically gets called when applet has loaded.
    */
    function qzReady() {
        // Setup our global qz object
        window["qz"] = document.getElementById('qz');
        if (qz) {
            try {
            }
            catch (err) { // LiveConnect error, display a detailed message
                alert("ERROR:  \nThe applet did not load correctly.  Communication to the " +
                    "applet has failed, likely caused by Java Security Settings.  \n\n" +
                    "CAUSE:  \nJava 7 update 25 and higher block LiveConnect calls " +
                    "once Oracle has marked that version as outdated, which " +
                    "is likely the cause.  \n\nSOLUTION:  \n  1. Update Java to the latest " +
                    "Java version \n          (or)\n  2. Lower the security " +
                    "settings from the Java Control Panel.");
            }
        }
    }

    /**
    * Returns whether or not the applet is not ready to print.
    * Displays an alert if not ready.
    */
    function notReady() {
        // If applet is not loaded, display an error
        if (!isLoaded()) {
            return true;
        }
            // If a printer hasn't been selected, display a message.
        else if (!qz.getPrinter()) {
            message("Printer is not set to default.", "error", "topCenter");
            return true;
        }
        return false;
    }

    /**
    * Returns is the applet is not loaded properly
    */
    function isLoaded() {
        if (!qz) {
            message("Error: Print plugin is NOT loaded!", "error", "topCenter");
            return false;
        } else {
            try {
                if (!qz.isActive()) {
                    message("Error:Print plugin is loaded but NOT active!", "error", "topCenter");
                    return false;
                }
            } catch (err) {
                message("Error: Print plugin is NOT loaded properly!", "error", "topCenter");
                return false;
            }
        }
        return true;
    }
    /**
    * Automatically gets called when "qz.print()" is finished.
    */
    function qzDonePrinting() {
        // Alert error, if any
        if (qz.getException()) {
            message("Error printing:" + qz.getException().getLocalizedMessage(), "error", "topCenter");
            qz.clearException();
            return;
        }

        // Alert success message
        // message("Printed", "success", "topCenter");
    }
    /***************************************************************************
    * Prototype function for finding the "default printer" on the system
    * Usage:
    *    qz.findPrinter();
    *    window['qzDoneFinding'] = function() { alert(qz.getPrinter()); };
    ***************************************************************************/
    function useDefaultPrinter() {
        if (isLoaded()) {
            // Searches for default printer
            qz.findPrinter();

            // Automatically gets called when "qz.findPrinter()" is finished.
            window["qzDoneFinding"] = function () {
                // Alert the printer name to user
                var defaultPrinter = qz.getPrinter();
                if (defaultPrinter == null) {
                    $("#menu-actions-print-tab").hide();
                    $("#printTab").hide();
                }
                else {
                    $("#printTab").show();
                }
                // 'Default printer found: "' + printer + '"' :

                // Remove reference to this function
                window["qzDoneFinding"] = null;
            };
        }
    }

    /***************************************************************************
    * Prototype function for finding the closest match to a printer name.
    * Usage:
    *    qz.findPrinter('zebra');
    *    window['qzDoneFinding'] = function() { alert(qz.getPrinter()); };
    ***************************************************************************/
    function findPrinter(name) {
        if (isLoaded()) {
            qz.findPrinter(name);
            window["qzDoneFinding"] = function () {
                window["qzDoneFinding"] = null;
            };
        }
    }
    /***************************************************************************
    * Prototype function for listing all printers attached to the system
    * Usage:
    *    qz.findPrinter('\\{dummy_text\\}');
    *    window['qzDoneFinding'] = function() { alert(qz.getPrinters()); };
    ***************************************************************************/
    function findPrinters() {
        if (isLoaded()) {
            qz.findPrinter("\\{bogus_printer\\}");

            window["qzDoneFinding"] = function () {
                printers = qz.getPrinters().split(",");
                sendPrinters(printers);
                window["qzDoneFinding"] = null;
            };
        }
    }

    function printData(data, name) {
        findPrinter(name);
        qz.appendHTML($.validator.format("<html>{0}<div style='margin-top: 50px;'>~</div></html>", data));
        qz.printHTML();
    }

    function sendPrinters(printers) {
        var jqxhr = $.post($.validator.format("{0}Home/SendPrinters", root), { "model": JSON.stringify(printers) }, "json")
            .done(function (result) {
            })
            .fail(function () {
                message("::sendPrinters:: Failed.", "error", "topCenter");
            })
            .always(function () {
            });
    }
</script>