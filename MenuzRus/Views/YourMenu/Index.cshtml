@model MenuzRus.Models.YourMenuModel
@using Services
<link href="@Url.Content("~/Content/yourMenu.css")" rel="stylesheet" />
<link href="@Url.Content("~/Content/jquery.colpick.css")" rel="stylesheet" />
<script src="@Url.Content("~/Scripts/jquery/jquery.colpick.js")"></script>
<div class="modal fade menuRenameForm" role="dialog">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <button type="button" class="close" data-dismiss="modal" aria-hidden="true">&times;</button>
                <h4 class="modal-title menuTitle">Menu</h4>
            </div>
            <div id="menuRenameForm" class="modal-body">
                <div class="container">
                    <div class="row">
                        @Html.TextBoxFor(m => m.Menu.Name, new { @class = "form-control input-sm shadow col-md-3", required = "", placeholder = "Enter new menu name" })
                    </div>
                    <div class="row">
                        @Html.TextAreaFor(m => m.Menu.Description, new { @class = "form-control input-sm shadow", rows = 5, placeholder = "Enter Item Name Description", type = "text" })
                    </div>
                </div>
            </div>
            <div class="modal-footer">
                <button id="btnCancelMenu" type="button" class="btn btn-default" data-dismiss="modal">Close</button>
                <button id="btnSaveMenu" type="button" class="btn btn-primary">Save changes</button>
            </div>
        </div>
    </div>
</div>

<div class="well toolbar">
    <div id="default">
        <button id="btnSettings" type="button" class="btn btn-default btn">
            <span class="glyphicon glyphicon-cog"></span>
        </button>
        @Html.DropDownListFor(m => m.Menu.id, new SelectList(Model.Menus, "id", "Name"), new { @class = "form-control input-sm shadow col-md-3" })
        <button id="btnNewMenu" type="button" class="btn btn-primary  btn-sm shadow">New menu</button>
        <button id="btnRenameMenu" type="button" class="btn btn-primary  btn-sm shadow">Rename menu</button>
        <button id="btnDeleteMenu" type="button" class="btn btn-primary  btn-sm shadow">Delete menu</button>
        <button id="btnMenuIt" type="button" class="btn btn-primary  btn-sm shadow">Menu-it</button>
        <div class=" pull-right">
            <button id="btnNewCategory" type="button" class="btn btn-primary  btn-sm shadow" data-toggle="modal" onclick="javascript:editCategory(0)">New category</button>
            <button id="btnNewItem" type="button" class="btn btn-primary  btn-sm shadow" data-toggle="modal" onclick="javascript:editItem(0)">New item</button>
        </div>
    </div>
</div>
<div class="well panel-setting-body">
    <ul class="nav nav-pills">
        <li class="active"><a href="#pageTab" data-toggle="tab">Page background</a>
        </li>
        <li><a href="#wallTab" data-toggle="tab">Wall background</a>
        </li>
        <li><a href="#settingsTab" data-toggle="tab">Settings</a>
        </li>
    </ul>
    <button id="btnCloseSetting" class="close" aria-hidden="true" data-dismiss="modal" type="button">×</button>

    <!-- Tab panes -->
    <div class="tab-content">
        @{Uri urlRoot = new Uri(Server.MapPath("~"));}
        <div class="tab-pane fade in active" id="pageTab">
            @{
                foreach (String file in Model.PageBackgrounds) {
                    Uri urlPath = new Uri(file);
                <img src="/@urlRoot.MakeRelativeUri(urlPath).ToString()" class="img-page img-thumbnail" />
                }
            }
        </div>

        <div class="tab-pane fade in" id="wallTab">
            @{
                foreach (String file in Model.Wallpapers) {
                    Uri urlPath = new Uri(file);
                <img src="/@urlRoot.MakeRelativeUri(urlPath).ToString()" class="img-wall img-thumbnail" />
                }
            }
        </div>
        <div class="tab-pane fade in" id="settingsTab">
            @foreach (Common.SettingsItems item in Enum.GetValues(typeof(Common.SettingsItems))) {
                var description = EnumHelper<Common.SettingsItems>.GetDisplayValue(item);
                var kolor = Model.Settings[String.Format("{0}{1}", item.ToString(), "Color")];
                var fontsize = Model.Settings[String.Format("{0}{1}", item.ToString(), "FontSize")];
                <div class="row settings">
                    <div class="col-md-2">@description
                    </div>
                    <div id="@String.Format("{0}{1}", item, "Color")" class="color-box col-md-1 col-lg-1"  style="background-color:@kolor"></div>
                    <div id="@String.Format("{0}{1}", item, "FontSize")" class="slider font col-md-3 col-lg-3"></div>
                    <span id="@String.Format("{0}{1}", item, "FontSizeBadge")" class="badge font">@fontsize</span>
                </div>
            }
        </div>
    </div>
</div>
<div class="well container">
    <div id="panel" class="panel panel-default panel-yourmenu shadow">
        <div class="panel-yourmenu-body">
            <div class="wall">
                <div class="col-md-3 page">
                    <a href="/Customer/Index/@Model.MyCompany.id">
                        @if (!String.IsNullOrEmpty(@Model.MyCompany.ImageUrl)) {
                            <div>
                                <img src="@Url.Content(String.Format("/Images/Menus/{0}/Customer/{1}?{2}", @Model.MyCompany.id, @Model.MyCompany.ImageUrl, Guid.NewGuid().ToString("N")))" class="logo" />
                            </div>
                        }
                        <div class="category">@Model.MyCompany.Name</div>
                        <div class="item">Welcomes you</div>
                        <div class="price">
                            @Model.MyCompany.Address<br>
                            @Model.MyCompany.City, @Model.MyCompany.State @Model.MyCompany.Zip<br>
                            @Model.MyCompany.Phone
                        </div>
                    </a>
                </div>
                <div class="col-md-3 page">
                    @ShowPage(Model, Common.Side.Left)
                </div>

                <div class="col-md-3 page">
                    @ShowPage(Model, Common.Side.Center)
                </div>

                <div class="col-md-3 page">
                    @ShowPage(Model, Common.Side.Right)
                </div>
            </div>
        </div>
    </div>
</div>

@helper ShowPage(MenuzRus.Models.YourMenuModel Model, Common.Side side) {
    <ul class="category-group">
        @foreach (Category category in Model.Categories.Where(m => m.Side == side.ToString()).ToList()) {
            <li  data-value="@category.id">
                <div class="btn-group category" data-value="@category.id">
                    <button id="cancelCategoryMenu" type="button" class="btn btn-default" onclick="javascript:  $('.btn-group').css('display', 'none')"><span class="glyphicon glyphicon-remove"></span></button>
                    <button id="editCategory" type="button" class="btn btn-info" onclick="javascript:editCategory(@category.id)"><span class="glyphicon glyphicon-pencil"></span></button>
                    <button id="addCategory" type="button" class="btn btn-primary" onclick="ajavascript:editCategory(0)"><span class="glyphicon glyphicon-plus"></span></button>
                    <button id="deleteCategory" type="button" class="btn btn-danger" onclick="javascript:deleteCategory(@category.id)"><span class="glyphicon glyphicon-trash"></span></button>
                </div>
                <a href="javascript:showCategoryMenu(@category.id)">
                    @if (!String.IsNullOrEmpty(category.Name)) {
                        String categoryDataValue = String.Format("{0}{1}", "category_", category.id);
                        <div id="@categoryDataValue" class="category" data-value="@category.id">
                            @category.Name
                        </div>
                    }
                    @if (!String.IsNullOrEmpty(@category.ImageUrl)) {
                        <div>
                            <img src="@Url.Content(String.Format("/Images/Menus/{0}/Categories/{1}?{2}", Model.MyCompany.id, category.ImageUrl, Guid.NewGuid().ToString("N")))" class="categoryImage" />
                        </div>
                    }
                    @if (!String.IsNullOrEmpty(@category.Description)) {
                        <div class="categoryDescription">@category.Description</div>
                    }
                </a>

                @if (category.Items != null && !String.IsNullOrEmpty(category.Name)) {
                    <ul class="items-group">
                        @foreach (Item item in category.Items.OrderBy(m => m.SortOrder)) {
                            <li  data-value="@item.id">
                                <div class="btn-group item" data-value="@item.id">
                                    <button id="cancelItemMenu" type="button" class="btn btn-default" onclick="javascript:  $('.btn-group').css('display', 'none')"><span class="glyphicon glyphicon-remove"></span></button>
                                    <button id="editItrem" type="button" class="btn btn-info" onclick="javascript:editItem(@item.id)"><span class="glyphicon glyphicon-pencil"></span></button>
                                    <button id="addItem" type="button" class="btn btn-primary" onclick="ajavascript:editItem(0)"><span class="glyphicon glyphicon-plus"></span></button>
                                    <button id="deletItem" type="button" class="btn btn-danger" onclick="javascript:deleteItem(@item.id)"><span class="glyphicon glyphicon-trash"></span></button>
                                </div>
                                <a href="javascript:showItemMenu(@item.id)">
                                    @if (!String.IsNullOrEmpty(@item.ImageUrl)) {
                                        <img src="@Url.Content(String.Format("/Images/Menus/{0}/Items/{1}?{2}", Model.MyCompany.id, item.ImageUrl, Guid.NewGuid().ToString("N")))" class="itemImage" />
                                    }
                                    @if (!String.IsNullOrEmpty(item.Name)) {
                                        String itemDataValue = String.Format("{0}{1}", "item_", item.id);
                                        <div id="@itemDataValue"class="item" data-value="@item.id">
                                            @item.Name
                                        </div>
                                    }
                                    @if (!String.IsNullOrEmpty(item.Description)) {
                                        <div class="itemDescription">@item.Description </div>
                                    }
                                    <div class="price">@item.ShowAsPrice</div>
                                </a>
                            </li>
                        }
                    </ul>
                }
            </li>
        }
    </ul>
}
<script>
    $(function () {
        /// ********** APPLY IMAGES ************///
        $(".img-wall").click(function () {
            var bg = "url(" + $(this).attr("src").replace("thumbnails/", "") + ") repeat";
            $(".wall").css("background", bg)
            var wallbackground = {
                Type: "wallbackground",
                Value: $(this).attr("src")
            };

            var jqxhr = $.post("/YourMenu/SaveSettings/", wallbackground)
                      .done(function (result) {
                      })
                      .fail(function (e) {
                      })
                      .always(function () {
                      });
        })

        $(".img-page").click(function () {
            var bg = "url(" + $(this).attr("src").replace("thumbnails/", "preview/") + ") no-repeat";
            $(".page").css("background", bg);
            var pagebackground = {
                Type: "pagebackground",
                Value: $(this).attr("src")
            };

            var jqxhr = $.post("/YourMenu/SaveSettings/", pagebackground)
                      .done(function (result) {
                      })
                      .fail(function () {
                      })
                      .always(function () {
                      });
        });

        $(".category-group").sortable({
            stop: function (e, ui) {
                var cats = [];
                $(this).children().each(function (i) {
                    var li = $(this);
                    cats.push(li.attr("data-value"));
                });

                var postData = { ids: cats.join(), type: "Category" };
                var jqxhr = $.post("/YourMenu/SaveOrder/", postData)
                              .done(function (result) {
                                  message("Sort order saved successfully.", "success", "topCenter");
                              })
                .fail(function () {
                    message("Sort order was not saved.", "error", "topCenter");
                })
                .always(function () {
                });
            }
        }).disableSelection();

        $(".items-group").sortable({
            stop: function (e, ui) {
                var items = [];
                $(this).children().each(function (i) {
                    var li = $(this);
                    items.push(li.attr("data-value"));
                });

                var postData = { ids: items.join(), type: "Items" };
                var jqxhr = $.post("/YourMenu/SaveOrder/", postData)
                              .done(function (result) {
                                  message("Sort order saved successfully.", "success", "topCenter");
                              })
                .fail(function () {
                    message("Sort order was not saved.", "error", "topCenter");
                })
                .always(function () {
                });
            }
        }).disableSelection();

        $("#Menu_id").change(function () {
            window.location = "/YourMenu/Index/" + $(this).val();
        })

        $("#btnNewMenu").click(function () {
            $("#Menu_id").val(0);
            $("#Menu_Name").val("");
            $(".menuTitle").html("New menu");
            $(".menuRenameForm").modal("show");
        })

        $("#btnRenameMenu").click(function () {
            $(".menuTitle").html("Rename menu");
            $(".menuRenameForm").modal("show");
        })

        $("#btnDeleteMenu").click(function () {
            noty({
                layout: "center",
                type: "error",
                killer: true,
                model: true,
                text: "Menu <em><strong>" + $("#Menu_Name").val() + "</strong></em> will be deleted.<br />Would you like to continue ?",
                buttons: [{
                    addClass: 'btn btn-danger', text: 'Delete', onClick: function ($noty) {
                        $noty.close();
                        deleteMenu($("#Menu_id").val());
                    }
                },
                  {
                      addClass: 'btn btn-default', text: 'Cancel', onClick: function ($noty) {
                          $noty.close();
                      }
                  }
                ]
            });
        })

        $("#btnCancelMenu").click(function () {
            $("#Menu_id").val(@Model.Menu.id);
            $("#Menu_Name").val("@Model.Menu.Name");
        })

        $("#btnSaveMenu").click(function () {
            $(".menuRenameForm").modal("hide");
            editMenu($("#Menu_id").val(), $("#Menu_Name").val());
        })

        $("#btnMenuIt").click(function () {
            window.open("/Menu/Index/" + $("#Menu_id").val(), "");
        })

        $("#btnSettings, #btnCloseSetting").click(function () {
            $(".panel-setting-body").toggle();
        })

        $(".slider.font").slider({
            range: "max",
            min: 6,
            max: 36,
            animate: true,
            slide: function (event, ui) {
                var klass = "";
                switch (this.id) {
                    case "CategoryFontSize":
                        klass = ".category";
                        break;
                    case "CategoryDescriptionFontSize":
                        klass = ".categoryDescription";
                        break;
                    case "ItemFontSize":
                        klass = ".item";
                        break;
                    case "ItemDescriptionFontSize":
                        klass = ".itemDescription";
                        break;
                    case "PriceFontSize":
                        klass = ".price";
                        break;
                }
                $(klass).css("font-size", ui.value);
                $($.validator.format("#{0}Badge", this.id)).html(ui.value);
            },
            stop: function (event, ui) {
                var fontsizeData = {
                    Type: this.id,
                    Value: ui.value
                };
                saveSettings(fontsizeData);
            }
        });

        $(".color-box").colpick({
            colorScheme: "light",
            layout: "hex",
            submit: 1,
            color: "ff8800",
            onChange: function (hsb, hex, rgb, el) {
                $(el).css("background-color", "#" + hex);
            },
            onSubmit: function (hsb, hex, rgb, el) {
                $(el).colpickHide();
                var klass = "";
                switch (el.id) {
                    case "CategoryColor":
                        klass = ".category";
                        break;
                    case "CategoryDescriptionColor":
                        klass = ".categoryDescription";
                        break;
                    case "ItemColor":
                        klass = ".item";
                        break;
                    case "ItemDescriptionColor":
                        klass = ".itemDescription";
                        break;
                    case "PriceColor":
                        klass = ".price";
                        break;
                }

                var colorData = {
                    Type: el.id,
                    Value: "#" + hex
                };
                $(klass).css("color", colorData.Value);

                saveSettings(colorData);
            }
        });
        applySettings();
    })

    /// ****** MENU ********///
    function editMenu(id, name) {
        if (id == null) id = 0;
        var postData = { id: id, name: name };
        var jqxhr = $.post("/YourMenu/SaveMenu/", postData)
                      .done(function (result) {
                          message("Save successfully.", "success", "topCenter");
                          window.location = "/YourMenu/Index/" + result;
                      })
        .fail(function () {
            message("Save menu failed.", "error", "topCenter");
        })
        .always(function () {
        });
    }

    function deleteMenu(id) {
        if (id == null) id = 0;
        var postData = { id: id };
        var jqxhr = $.post("/YourMenu/DeleteMenu/", postData)
                      .done(function (result) {
                          message("Menu deleted successfully.", "success", "topCenter");
                          window.location = "/YourMenu";
                      })
        .fail(function () {
            message("Delete menu failed.", "error", "topCenter");
        })
        .always(function () {
        });
    }

    /// ****** CATEGORY ***************///
    function showCategoryMenu(id) {
        $(".btn-group.category").css("display", "none");
        $(".btn-group.item").css("display", "none");
        $(".btn-group.category[data-value=" + id + "]").css("display", "inline");
    }

    function editCategory(id) {
        $(".btn-group.category").css("display", "none");
        $(".btn-group.item").css("display", "none");
        var jqxhr = $.get("/Category/EditCategory/", { id: id })
                      .done(function (result) {
                          $("#modalEditForm").html(result);
                          $(".modalEditForm").modal("show");
                      })
        .fail(function () {
        })
        .always(function () {
        });
    }

    function deleteCategory(id) {
        $(".btn-group.category").css("display", "none");
        $(".btn-group.item").css("display", "none");
        var name = $(".category[id=category_" + id + "]").html();
        noty({
            layout: "center",
            type: "error",
            killer: true,
            model: true,
            text: "Category <em><strong>" + name + "</strong></em> will be deleted.<br />Would you like to continue ?",
            buttons: [{
                addClass: 'btn btn-danger', text: 'Delete', onClick: function ($noty) {
                    $noty.close();
                    var jqxhr = $.post("/Category/DeleteCategory/", { id: id })
                                     .done(function (result) {
                                         message("Category successfully deletes.", "success", "topCenter");
                                         window.location = "/YourMenu/Index/" + $("#Menu_id").val();
                                     })
                       .fail(function () {
                           message("Delete category failed.", "error", "topCenter");
                       })
                       .always(function () {
                       });
                }
            },
              {
                  addClass: 'btn btn-default', text: 'Cancel', onClick: function ($noty) {
                      $noty.close();
                  }
              }
            ]
        });
    }

    /// ****** SETTINGS ***************///
    function applySettings() {
        var bg = "url(/Images/Backgrounds/Pages/preview/@Model.Settings[Common.Settings.PageBackground.ToString()]) no-repeat";
        if (bg != "")
            $(".page").css("background", bg);

        bg = "url(/Images/Backgrounds/Wall/@Model.Settings[Common.Settings.WallBackground.ToString()]) repeat";
        if (bg != "")
            $(".wall").css("background", bg);

        // Color
        var kolor = "@Model.Settings[Common.Settings.CategoryColor.ToString()]";
        if (kolor != "")
            $(".category").css("color", kolor);

        kolor = "@Model.Settings[Common.Settings.CategoryDescriptionColor.ToString()]";
        if (kolor != "")
            $(".categoryDescription").css("color", kolor);

        kolor = "@Model.Settings[Common.Settings.ItemColor.ToString()]";
        if (kolor != "")
            $(".item").css("color", kolor);

        kolor = "@Model.Settings[Common.Settings.ItemDescriptionColor.ToString()]";
        if (kolor != "")
            $(".itemDescription").css("color", kolor);

        kolor = "@Model.Settings[Common.Settings.PriceColor.ToString()]";
        if (kolor != "")
            $(".price").css("color", kolor);

        // Font Size
        var fontsize = "@Model.Settings[Common.Settings.CategoryFontSize.ToString()].ToString()";
        if (fontsize != "") {
            $(".category").css("font-size", $.validator.format("{0}px", fontsize));
            $("#CategoryFontSize").slider("value", fontsize);
        }

        fontsize = "@Model.Settings[Common.Settings.CategoryDescriptionFontSize.ToString()].ToString()";
        if (fontsize != "") {
            $(".categoryDescription").css("font-size", $.validator.format("{0}px", fontsize));
            $("#CategoryDescriptionFontSize").slider("value", fontsize);
        }

        fontsize = "@Model.Settings[Common.Settings.ItemFontSize.ToString()].ToString()";
        if (fontsize != "") {
            $(".item").css("font-size", $.validator.format("{0}px", fontsize));
            $("#ItemFontSize").slider("value", fontsize);
        }

        fontsize = "@Model.Settings[Common.Settings.ItemDescriptionFontSize.ToString()].ToString()";
        if (fontsize != "") {
            $(".itemDescription").css("font-size", $.validator.format("{0}px", fontsize));
            $("#ItemDescriptionFontSize").slider("value", fontsize);
        }

        fontsize = "@Model.Settings[Common.Settings.PriceFontSize.ToString()].ToString()";
        if (fontsize != "") {
            $(".price").css("font-size", $.validator.format("{0}px", fontsize));
            $("#PriceFontSize").slider("value", fontsize);
        }

    }

    function saveSettings(obj) {
        var jqxhr = $.post("/YourMenu/SaveSettings/", obj)
          .done(function (result) {
              var text = result; // Will contain error if exception
              if (result == "OK")
                  text = "Settings successfully saved.";
              message(text, "success", "topCenter");
          })
          .fail(function () {
              message("Settings was not saved.", "error", "topCenter");
          })
          .always(function () {
          });
    }

    /// ****** ITEMS ***************///
    function showItemMenu(id) {
        $(".btn-group.category").css("display", "none");
        $(".btn-group.item").css("display", "none");
        $(".btn-group.item[data-value=" + id + "]").css("display", "inline");
    }

    function editItem(id) {
        $(".btn-group.category").css("display", "none");
        $(".btn-group.item").css("display", "none");
        var jqxhr = $.get("/Item/EditItem/", { id: id })
                      .done(function (result) {
                          $("#modalEditForm").html(result);
                          $(".modalEditForm").modal("show");
                      })
        .fail(function () {
        })
        .always(function () {
        });
    }

    function deleteItem(id) {
        $(".btn-group.category").css("display", "none");
        $(".btn-group.item").css("display", "none");
        var name = $(".item[id=item_" + id + "]").html();
        noty({
            layout: "center",
            type: "error",
            killer: true,
            model: true,
            text: "Item <em><strong>" + name + "</strong></em> will be deleted.<br />Would you like to continue ?",
            buttons: [{
                addClass: 'btn btn-danger', text: "Delete", onClick: function ($noty) {
                    $noty.close();
                    var jqxhr = $.post("/Item/DeleteItem/", { id: id })
                                  .done(function (result) {
                                      message("Deleted successfully.", "success", "topCenter");
                                      window.location = "/YourMenu/Index/" + $("#Menu_id").val();
                                  })
                    .fail(function () {
                        message("Delete item failed.", "error", "topCenter");
                    })
                    .always(function () {
                    });
                }
            },
              {
                  addClass: 'btn btn-default', text: 'Cancel', onClick: function ($noty) {
                      $noty.close();
                  }
              }
            ]
        });
    }
</script>